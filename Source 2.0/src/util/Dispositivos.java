/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sensorfabbobox;

import com.panamahitek.ArduinoException;
import com.panamahitek.PanamaHitek_Arduino;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Fabianno
 */
public class Dispositivos extends javax.swing.JFrame {
    private boolean connected;
    private PanamaHitek_Arduino device;
    /**
     * Creates new form Dispositivos
     */
    public Dispositivos() {
        initComponents();
        this.connected = false;
        this.device = new PanamaHitek_Arduino();
        this.conectarButton.setEnabled(false);
        this.desconectarButton.setEnabled(false);
        
        this.actualizarButtonActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaDispositivos = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        actualizarButton = new javax.swing.JButton();
        conectarButton = new javax.swing.JButton();
        desconectarButton = new javax.swing.JButton();
        warningLabel = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        setTitle("Dispositivos");
        setResizable(false);

        listaDispositivos.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        listaDispositivos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listaDispositivos.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaDispositivosValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listaDispositivos);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Dispositivos de visualizaci√≥n:");

        actualizarButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        actualizarButton.setText("Actualizar");
        actualizarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarButtonActionPerformed(evt);
            }
        });

        conectarButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        conectarButton.setText("Conectar");
        conectarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conectarButtonActionPerformed(evt);
            }
        });

        desconectarButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        desconectarButton.setText("Desconectar");
        desconectarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desconectarButtonActionPerformed(evt);
            }
        });

        warningLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        warningLabel.setForeground(new java.awt.Color(204, 0, 51));
        warningLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(warningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(actualizarButton)
                            .addGap(18, 18, 18)
                            .addComponent(conectarButton)
                            .addGap(18, 18, 18)
                            .addComponent(desconectarButton, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE))
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(warningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(actualizarButton)
                    .addComponent(conectarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(desconectarButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void actualizarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarButtonActionPerformed
        this.conectarButton.setEnabled(false);
        List<String> puertos = this.device.getSerialPorts();
        DefaultListModel model = new DefaultListModel<>();
        for(String p : puertos) model.addElement("Dispositivo en "+p);
        if(model.isEmpty()) this.warningLabel.setText("No se encuentran dipositivos.");
        else this.warningLabel.setText("");
        this.listaDispositivos.setModel(model);
    }//GEN-LAST:event_actualizarButtonActionPerformed

    private void conectarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conectarButtonActionPerformed
        try {
            if(this.connected) this.device.killArduinoConnection();
            String d = this.listaDispositivos.getSelectedValue();
            String[] aux = d.split(" ");
            d = aux[aux.length-1];
            this.device.arduinoTX(d, 9600);
            this.desconectarButton.setEnabled(true);
            this.connected = true;
            this.warningLabel.setText("Conectado con dispositivo en: "+d);
        } 
        catch (ArduinoException ex) {
            JOptionPane.showMessageDialog(this, "Error: Error inesperado al conectar el dispositivo.");
        }
            
    }//GEN-LAST:event_conectarButtonActionPerformed

    private void desconectarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desconectarButtonActionPerformed
        try{
            this.device.killArduinoConnection();
        }
        catch(ArduinoException e){
            JOptionPane.showMessageDialog(this, "Error: Error inesperado al desconectar el dispositivo.");
        }
        finally{
            this.warningLabel.setText("");
            this.desconectarButton.setEnabled(false);
            this.connected = false;
        }
    }//GEN-LAST:event_desconectarButtonActionPerformed

    private void listaDispositivosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaDispositivosValueChanged
        this.conectarButton.setEnabled(true);
    }//GEN-LAST:event_listaDispositivosValueChanged

    public boolean isDevConnected(){return this.connected;}
    
    public PanamaHitek_Arduino getDevice(){return this.device;}
    
    public void send(String msg){
        try{
            this.device.sendData(msg);
        }
        catch(Exception e){this.desconectarButtonActionPerformed(null);}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualizarButton;
    private javax.swing.JButton conectarButton;
    private javax.swing.JButton desconectarButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listaDispositivos;
    private javax.swing.JLabel warningLabel;
    // End of variables declaration//GEN-END:variables
}
